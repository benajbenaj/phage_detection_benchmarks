rule all:
    input:
        config["out_dir"] + "/combined_out/combined.csv",
        config["out_dir"] + "/combined_out/benchmarks.csv",

rule combine_preds:
    input:
        expand(
            "{out_dir}/{kingdom}/{length}/{tool}_out/{tool}_pred_formatted.csv",
            out_dir=config["out_dir"],
            kingdom=config["kingdoms"],
            length=config["lengths"],
            tool=config["tools"],
        ),
    output:
        config["out_dir"] + "/combined_out/combined.csv",
    params:
        out_dir=config["out_dir"],
        combine=config["combine"],
    shell:
        """
        source activate snakemake_env

        {params.combine} -o {params.out_dir}/combined_out {input}
        """


rule combine_benchmarks:
    input:
        expand(
            "benchmarks/{tool}/{kingdom}_{length}_benchmark.txt",
            tool=config["tools"],
            kingdom=config["kingdoms"],
            length=config["lengths"],
        ),
    output:
        config["out_dir"] + "/combined_out/benchmarks.csv",
    params:
        out_dir=config["out_dir"],
        benchmark=config["benchmark"],
    shell:
        """
        source activate snakemake_env

        {params.benchmark} -o {params.out_dir}/combined_out {input}
        """


rule pred_deepvirfinder:
    input:
        config["in_dir"] + "/{kingdom}/{length}/selected_frags.fasta",
    output:
        config["out_dir"]
        + "/{kingdom}/{length}/dvf_out/selected_frags.fasta_gt1bp_dvfpred.txt",
    params:
        dvf=config["deepvirfinder"],
        env=config["dvf_env"],
        cores=config["deepvirfinder_cores"],
        in_dir=config["in_dir"],
        out_dir=config["out_dir"],
    log:
        "logs/dvf/{kingdom}_{length}.log",
    benchmark:
        "benchmarks/dvf/{kingdom}_{length}_benchmark.txt"
    shell:
        """
        source activate {params.env}

        ({params.dvf} -i {params.in_dir}/{wildcards.kingdom}/{wildcards.length}/selected_frags.fasta -o {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/dvf_out -c {params.cores}) 2> {log}
        """


rule reformat_dvf:
    input:
        config["out_dir"]
        + "/{kingdom}/{length}/dvf_out/selected_frags.fasta_gt1bp_dvfpred.txt",
    output:
        config["out_dir"] + "/{kingdom}/{length}/dvf_out/dvf_pred_formatted.csv",
    params:
        out_dir=config["out_dir"],
        reformat=config["reformat"],
    shell:
        """
        source activate snakemake_env

        {params.reformat} -l {wildcards.length} -a {wildcards.kingdom} -t dvf -o {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/dvf_out {input}
        """


rule pred_seeker:
    input:
        config["in_dir"] + "/{kingdom}/{length}/selected_frags.fasta",
    output:
        config["out_dir"] + "/{kingdom}/{length}/seeker_out/pred.txt",
    params:
        seeker=config["seeker"],
        in_dir=config["in_dir"],
        out_dir=config["out_dir"],
    log:
        "logs/seeker/{kingdom}_{length}.log",
    benchmark:
        "benchmarks/seeker/{kingdom}_{length}_benchmark.txt"
    shell:
        """
        source activate seeker_env


        ({params.seeker} {params.in_dir}/{wildcards.kingdom}/{wildcards.length}/selected_frags.fasta > {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/seeker_out/pred.txt) 2> {log}
        """


rule reformat_seeker:
    input:
        config["out_dir"] + "/{kingdom}/{length}/seeker_out/pred.txt",
    output:
        config["out_dir"] + "/{kingdom}/{length}/seeker_out/seeker_pred_formatted.csv",
    params:
        out_dir=config["out_dir"],
        reformat=config["reformat"],
    shell:
        """
        source activate snakemake_env

        {params.reformat} -l {wildcards.length} -a {wildcards.kingdom} -t seeker -o {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/seeker_out {input}
        """


rule pred_virsorster:
    input:
        config["in_dir"] + "/{kingdom}/{length}/selected_frags.fasta",
    output:
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_cat-1.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_cat-2.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_cat-3.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_prophages_cat-4.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_prophages_cat-5.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_prophages_cat-6.fasta",
    params:
        virsorter=config["virsorter"],
        env=config["virsorter_env"],
        in_dir=config["in_dir"],
        out_dir=config["out_dir"],
        cpu=config["virsorter_cpu"],
        db=config["virsorter_db"]
        data=config["virsorter_data"]
    log:
        "logs/virsorter/{kingdom}_{length}.log",
    benchmark:
        "benchmarks/virsorter/{kingdom}_{length}_benchmark.txt"
    shell:
        """
        source activate {params.env}

        {params.virsorter} -f {input} --db {params.db} --wdir {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/virsorter_out --ncpu {params.cpu} --data-dir {params.data}
        """

rule wrangle_virsorter:
    input:
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_cat-1.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_cat-2.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_cat-3.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_prophages_cat-4.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_prophages_cat-5.fasta",
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/VIRSorter_prophages_cat-6.fasta",
    output:
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/combined_sequences.txt
    params:
        wrangle=config["virsorter_wrangler"],
        out_dir=config["out_dir"],
    shell:
        """
        source activate snakemake_env

        wrangle {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/virsorter_out/Predicted_viral_sequences
        """

rule reformat_virsorter:
    input:
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/Predicted_viral_sequences/combined_sequences.txt
    output:
        config["out_dir"] + "/{kingdom}/{length}/virsorter_out/virsorter_pred_reformatted.txt
    params:
        out_dir=config["out_dir"],
        reformat=config["reformat"],
    shell:
        """
        source activate snakemake_env

        {params.reformat} -l {wildcards.length} -a {wildcards.kingdom} -t virsorter -o {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/virsorter_out {input}
        """


rule pred_virsorter2:
    input:
        config["in_dir"] + "/{kingdom}/{length}/selected_frags.fasta",
    output:
        config["out_dir"] + "/{kingdom}/{length}/virsorter2_out/final-viral-boundary.tsv",
        config["out_dir"] + "/{kingdom}/{length}/virsorter2_out/final-viral-combined.fa",
        config["out_dir"] + "/{kingdom}/{length}/virsorter2_out/final-viral-score.tsv",
    params:
        virsorter2=config["virsorter2"],
        env=config["virsorter2_env"],
        in_dir=config["in_dir"],
        out_dir=config["out_dir"],
    log:
        "logs/virsorter2/{kingdom}_{length}.log",
    benchmark:
        "benchmarks/virsorter2/{kingdom}_{length}_benchmark.txt"
    shell:
        """
        source activate {params.env}


        ({params.virsorter2} -i {params.in_dir}/{wildcards.kingdom}/{wildcards.length}/selected_frags.fasta -w {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/virsorter2_out) 2> {log}
        """


rule reformat_virsorter2:
    input:
        config["out_dir"] + "/{kingdom}/{length}/virsorter2_out/final-viral-score.tsv",
    output:
        config["out_dir"]
        + "/{kingdom}/{length}/virsorter2_out/virsorter2_pred_formatted.csv",
    params:
        out_dir=config["out_dir"],
        reformat=config["reformat"],
    shell:
        """
        source activate snakemake_env

        {params.reformat} -l {wildcards.length} -a {wildcards.kingdom} -t virsorter2 -o {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/virsorter2_out {input}
        """


rule pred_breadsticks:
    input:
        config["in_dir"] + "/{kingdom}/{length}/selected_frags.fasta",
    output:
        "breadsticks_out_{kingdom}_{length}/breadsticks_out_{kingdom}_{length}_CONTIG_SUMMARY.tsv",
    params:
        breadsticks=config["breadsticks"],
        env=config["breadsticks_env"],
        in_dir=config["in_dir"],
        out_dir=config["out_dir"],
        mem=config["breadsticks_mem"],
        cpus=config["breadsticks_cpu"],
    log:
        "logs/breadsticks/{kingdom}_{length}.log",
    benchmark:
        "benchmarks/breadsticks/{kingdom}_{length}_benchmark.txt"
    shell:
        """
        source activate {params.env}

        ({params.breadsticks} -p False -m {params.mem} -t {params.cpus} -c {params.in_dir}/{wildcards.kingdom}/{wildcards.length}/selected_frags.fasta -r breadsticks_out_{wildcards.kingdom}_{wildcards.length}) 2> {log}
        """


rule move_breadsticks:
    input:
        "breadsticks_out_{kingdom}_{length}/breadsticks_out_{kingdom}_{length}_CONTIG_SUMMARY.tsv",
    output:
        config["out_dir"]
        + "/{kingdom}/{length}/breadsticks_out/breadsticks_out_CONTIG_SUMMARY.tsv",
    params:
        out_dir=config["out_dir"],
    shell:
        """
        mv {input} {output}

        rm -rf breadsticks_out_{wildcards.kingdom}_{wildcards.length}/
        """


rule reformat_breadsticks:
    input:
        config["out_dir"]
        + "/{kingdom}/{length}/breadsticks_out/breadsticks_out_CONTIG_SUMMARY.tsv",
    output:
        config["out_dir"]
        + "/{kingdom}/{length}/breadsticks_out/breadsticks_pred_formatted.csv",
    params:
        out_dir=config["out_dir"],
        reformat=config["reformat"],
    shell:
        """
        source activate snakemake_env

        {params.reformat} -l {wildcards.length} -a {wildcards.kingdom} -t breadsticks -o {params.out_dir}/{wildcards.kingdom}/{wildcards.length}/breadsticks_out {input}
        """
